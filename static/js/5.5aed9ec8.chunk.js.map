{"version":3,"sources":["asset/tamago.svg","pages/menu/components/MenuItem.tsx","pages/menu/components/MenuCategory.tsx","hook/useApiGet.ts","pages/menu/components/CategoryDrink.tsx","pages/menu/components/CategorySalad.tsx","pages/menu/components/CategorySushi.tsx","pages/menu/components/CategoryRice.tsx","pages/menu/Menu.tsx"],"names":["module","exports","MenuItem","name","price","sku","description","imgSrc","useState","isLoading","setIsLoading","dispatch","useDispatch","cart","useSelector","cartSelector","itemInCart","cartItemSelector","theme","useTheme","Container","ImgContainer","SpinnerContainer","ImgSpinner","ItemImg","loading","src","onLoad","ItemName","ItemPrice","toFixed","ItemDescription","InCartQuantity","TamagoSVG","tamagoSVG","quantity","AddSpinnerWrapper","Spinner","color","primary","size","Button","outlined","onClick","itemId","getCartItemIdByKey","increaseItemQuantity","amount","isIncrementAmount","addItemToCart","styled","li","h3","p","div","attrs","img","span","BaseButton","MenuCategory","categoryName","menuItems","menuId","isFetching","renderedMenuItems","SpinnerWrapper","MenuItems","map","menuItem","index","key","Error","role","aria-label","renderMenuItems","Header","id","h2","ul","useApiGet","api","axios","url","data","setData","useEffect","a","get","responseData","console","log","getData","CategoryDrink","firebaseApi","drinks","drinksIsLoading","desserts","dessertsIsLoading","_","concat","CategorySalad","appetizers","appetizersIsLoading","salads","saladsIsLoading","CategorySushi","sashimi","sashimiIsLoading","CategoryRice","noodles","noodlesIsLoading","rice","riceIsLoading","Menu","useScroll","useTitle"],"mappings":"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","file":"static/js/5.5aed9ec8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tamago.1751be94.svg\";","import React, { useState } from 'react';\r\nimport styled, { useTheme } from 'styled-components/macro';\r\nimport { BaseButton } from '../../../components/ui/BaseButton';\r\nimport Spinner from '../../../components/ui/LoadingScreen/Spinner/Spinner';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  addItemToCart,\r\n  cartSelector,\r\n  increaseItemQuantity,\r\n  cartItemSelector,\r\n} from '../../../features/cartSlice';\r\nimport { getCartItemIdByKey } from '../../../helpers';\r\nimport tamagoSVG from '../../../asset/tamago.svg';\r\nimport { MdAddShoppingCart } from 'react-icons/md';\r\nexport interface MenuItemProps {\r\n  name: string;\r\n  price: number;\r\n  description?: string;\r\n  imgSrc?: string;\r\n  sku: string;\r\n}\r\n\r\n/**\r\n * @description render a single MenuItem with all the dish's info\r\n * @param name the name of this dish\r\n * @param price the price of this dish\r\n * @param description the description of this dish\r\n * @param imgSrc the source of this dish's img\r\n */\r\nexport const MenuItem: React.FC<MenuItemProps> = ({\r\n  name,\r\n  price,\r\n  sku,\r\n  description = 'No description',\r\n  /* default is 404 img */\r\n  imgSrc = 'https://i.imgur.com/tjk7okS.png',\r\n}) => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const dispatch = useDispatch();\r\n  const cart = useSelector(cartSelector);\r\n  const itemInCart = useSelector(cartItemSelector(name));\r\n  const theme = useTheme();\r\n\r\n  const onAddItem = () => {\r\n    const itemId = getCartItemIdByKey(cart, 'name', name);\r\n\r\n    if (itemId) {\r\n      dispatch(\r\n        increaseItemQuantity({ itemId, amount: 1, isIncrementAmount: true })\r\n      );\r\n    } else {\r\n      dispatch(\r\n        addItemToCart({\r\n          name,\r\n          price,\r\n          sku,\r\n          quantity: 1,\r\n          imgSrc,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <ImgContainer>\r\n        {isLoading && (\r\n          <SpinnerContainer>\r\n            <ImgSpinner />\r\n          </SpinnerContainer>\r\n        )}\r\n        <ItemImg\r\n          loading=\"lazy\"\r\n          src={imgSrc}\r\n          onLoad={() => setIsLoading(false)}\r\n        />\r\n      </ImgContainer>\r\n      <ItemName>{name}</ItemName>\r\n      <ItemPrice>{price.toFixed(2)}</ItemPrice>\r\n      <ItemDescription>{description}</ItemDescription>\r\n      <InCartQuantity>\r\n        <TamagoSVG src={tamagoSVG} />x{itemInCart ? itemInCart.quantity : 0}\r\n      </InCartQuantity>\r\n\r\n      {cart.isLoading ? (\r\n        <AddSpinnerWrapper>\r\n          <Spinner color={theme.primary} size=\"1rem\" />\r\n        </AddSpinnerWrapper>\r\n      ) : (\r\n        <Button outlined onClick={onAddItem}>\r\n          {itemInCart ? '+' : <MdAddShoppingCart />}\r\n        </Button>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\ninterface ContainerProps {}\r\nconst Container = styled.li<ContainerProps>`\r\n  display: grid;\r\n  grid-template-columns: 70% 30%;\r\n  align-items: center;\r\n`;\r\nconst ItemName = styled.h3`\r\n  text-transform: uppercase;\r\n  font-weight: 500;\r\n`;\r\nconst ItemPrice = styled.h3`\r\n  font-weight: normal;\r\n\r\n  justify-self: flex-end;\r\n\r\n  ::before {\r\n    content: '$';\r\n  }\r\n`;\r\n\r\nconst ItemDescription = styled.p`\r\n  grid-column: 1/-1;\r\n\r\n  font-style: italic;\r\n  font-size: 1.5rem;\r\n`;\r\nconst ImgContainer = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 20rem;\r\n\r\n  grid-column: 1/-1;\r\n\r\n  margin-bottom: 1.5rem;\r\n`;\r\nconst SpinnerContainer = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n`;\r\nconst ImgSpinner = styled(Spinner).attrs((p) => ({ color: p.theme.primary }))``;\r\n\r\nconst ItemImg = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  object-position: center;\r\n\r\n  border-radius: 4px;\r\n`;\r\n\r\nconst InCartQuantity = styled.span`\r\n  display: inline-flex;\r\n  align-items: center;\r\n  font-size: 1rem;\r\n`;\r\nconst TamagoSVG = styled.img`\r\n  height: 2em;\r\n`;\r\n\r\nconst AddSpinnerWrapper = styled.span`\r\n  justify-self: flex-end;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  height: 3rem;\r\n`;\r\n\r\nconst Button = styled(BaseButton)`\r\n  justify-self: flex-end;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  height: 3rem;\r\n  width: 3rem;\r\n  padding: unset;\r\n  border-radius: 50%;\r\n\r\n  font-size: 2rem;\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport { MenuItem, MenuItemProps } from './MenuItem';\r\nimport { menuIds } from '../../../data/menu';\r\nimport Spinner from '../../../components/ui/LoadingScreen/Spinner/Spinner';\r\n\r\ninterface MenuCategoryProps {\r\n  categoryName: string;\r\n  children?: never;\r\n  menuItems: (MenuItemProps | null)[] | null;\r\n  menuId: menuIds;\r\n  isFetching: boolean;\r\n}\r\n\r\n/**\r\n * @description render a container with heading for many MenuItem\r\n * @param categoryName the header of this category\r\n * @param menuItems an array of MenuItem\r\n * @param menuId the id that matches with links from the Landing PAge\r\n */\r\nexport const MenuCategory: React.FC<MenuCategoryProps> = ({\r\n  categoryName,\r\n  menuItems,\r\n  menuId,\r\n  isFetching,\r\n}) => {\r\n  let renderedMenuItems = (\r\n    <SpinnerWrapper>\r\n      <Spinner />\r\n    </SpinnerWrapper>\r\n  );\r\n\r\n  if (!isFetching) {\r\n    if (!menuItems) {\r\n      renderedMenuItems = (\r\n        <Error>\r\n          Fail to get menu\r\n          <span role=\"img\" aria-label=\"crying-emoji\">\r\n            😢\r\n          </span>\r\n        </Error>\r\n      );\r\n    } else {\r\n      renderedMenuItems = <MenuItems>{renderMenuItems(menuItems)}</MenuItems>;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Header id={menuId}>{categoryName}</Header>\r\n      {renderedMenuItems}\r\n    </Container>\r\n  );\r\n};\r\n\r\nfunction renderMenuItems(menuItems: (MenuItemProps | null)[]) {\r\n  return menuItems.map((menuItem, index) =>\r\n    menuItem ? (\r\n      <MenuItem key={index} {...menuItem} />\r\n    ) : (\r\n      <Error key={index}>\r\n        Fail to get item\r\n        <span role=\"img\" aria-label=\"crying-emoji\">\r\n          😢\r\n        </span>\r\n      </Error>\r\n    )\r\n  );\r\n}\r\n\r\ninterface ContainerProps {}\r\nconst Container = styled.div<ContainerProps>`\r\n  width: 80%;\r\n  margin: 3rem auto;\r\n  /* For intial loading */\r\n  min-height: 30rem;\r\n`;\r\n\r\nconst Header = styled.h2`\r\n  text-transform: uppercase;\r\n  text-align: center;\r\n  font-size: 4rem;\r\n  margin-bottom: 2rem;\r\n\r\n  color: ${(p) => p.theme.primary};\r\n`;\r\nconst MenuItems = styled.ul`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(20rem, 1fr));\r\n  gap: 5rem;\r\n`;\r\n\r\nconst SpinnerWrapper = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Error = styled.p``;\r\n","import { useState, useEffect } from 'react';\r\nimport axios, { AxiosInstance } from 'axios';\r\n\r\nexport const useApiGet = <Response>(\r\n  api: AxiosInstance = axios,\r\n  url: string\r\n): [Response | null, boolean] => {\r\n  const [data, setData] = useState<Response | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n    async function getData() {\r\n      try {\r\n        const { data: responseData } = await api.get<Response | null>(url);\r\n        setData(responseData);\r\n      } catch (error) {\r\n        console.log(error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n  }, [api, url]);\r\n\r\n  return [data, isLoading];\r\n};\r\n","import React from 'react';\r\nimport { MenuCategory } from './MenuCategory';\r\nimport { firebaseApi } from '../../../apis/firebase';\r\nimport _ from 'lodash';\r\nimport { MenuItemProps } from './MenuItem';\r\nimport { useApiGet } from '../../../hook/useApiGet';\r\ninterface CategoryDrinkProps {}\r\n\r\n/**\r\n * @description renders the Desserts and Drinks section menu\r\n */\r\nexport const CategoryDrink: React.FC<CategoryDrinkProps> = () => {\r\n  const [drinks, drinksIsLoading] = useApiGet<MenuItemProps[]>(\r\n    firebaseApi,\r\n    '/menus/drinks.json'\r\n  );\r\n  const [desserts, dessertsIsLoading] = useApiGet<MenuItemProps[]>(\r\n    firebaseApi,\r\n    '/menus/desserts.json'\r\n  );\r\n\r\n  return (\r\n    drinks &&\r\n    desserts && (\r\n      <MenuCategory\r\n        menuId=\"dessertsAndDrinks\"\r\n        categoryName=\"Desserts & Drinks\"\r\n        menuItems={_.concat(drinks, desserts)}\r\n        isFetching={drinksIsLoading || dessertsIsLoading}\r\n      />\r\n    )\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { MenuCategory } from './MenuCategory';\r\nimport _ from 'lodash';\r\nimport { useApiGet } from '../../../hook/useApiGet';\r\nimport { firebaseApi } from '../../../apis/firebase';\r\nimport { MenuItemProps } from './MenuItem';\r\n\r\ninterface CategorySaladProps {}\r\n\r\n/**\r\n * @description renders the Appetizers and Salads section menu\r\n */\r\n\r\nexport const CategorySalad: React.FC<CategorySaladProps> = () => {\r\n  const [appetizers, appetizersIsLoading] = useApiGet<MenuItemProps[]>(\r\n    firebaseApi,\r\n    '/menus/appetizers.json'\r\n  );\r\n  const [salads, saladsIsLoading] = useApiGet<MenuItemProps[]>(\r\n    firebaseApi,\r\n    '/menus/salads.json'\r\n  );\r\n\r\n  return (\r\n    <MenuCategory\r\n      menuId=\"appetizersAndSalads\"\r\n      categoryName=\"Appetizers & Salad\"\r\n      menuItems={_.concat(appetizers, salads)}\r\n      isFetching={appetizersIsLoading || saladsIsLoading}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { MenuCategory } from './MenuCategory';\r\nimport { useApiGet } from '../../../hook/useApiGet';\r\nimport { firebaseApi } from '../../../apis/firebase';\r\nimport { MenuItemProps } from './MenuItem';\r\n\r\ninterface CategorySushiProps {}\r\n\r\n/**\r\n * @description renders the Sushi and Sashimi section menu\r\n */\r\nexport const CategorySushi: React.FC<CategorySushiProps> = () => {\r\n  const [sashimi, sashimiIsLoading] = useApiGet<MenuItemProps[]>(\r\n    firebaseApi,\r\n    '/menus/sashimi.json'\r\n  );\r\n\r\n  return (\r\n    <MenuCategory\r\n      menuId=\"sushiAndSashimi\"\r\n      categoryName=\"Sushi & Sashimi\"\r\n      menuItems={sashimi}\r\n      isFetching={sashimiIsLoading}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { MenuCategory } from './MenuCategory';\r\nimport _ from 'lodash';\r\nimport { useApiGet } from '../../../hook/useApiGet';\r\nimport { firebaseApi } from '../../../apis/firebase';\r\nimport { MenuItemProps } from './MenuItem';\r\n\r\ninterface CategoryRiceProps {}\r\n\r\n/**\r\n * @description renders the Rice and Noodles menu\r\n */\r\n\r\nexport const CategoryRice: React.FC<CategoryRiceProps> = () => {\r\n  const [noodles, noodlesIsLoading] = useApiGet<MenuItemProps[]>(\r\n    firebaseApi,\r\n    '/menus/noodles.json'\r\n  );\r\n  const [rice, riceIsLoading] = useApiGet<MenuItemProps[]>(\r\n    firebaseApi,\r\n    '/menus/rice.json'\r\n  );\r\n\r\n  return (\r\n    <MenuCategory\r\n      menuId=\"riceAndNoodles\"\r\n      categoryName=\"Rice & Noodles\"\r\n      menuItems={_.concat(noodles, rice)}\r\n      isFetching={noodlesIsLoading || riceIsLoading}\r\n    />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {\r\n  CategoryDrink,\r\n  CategorySalad,\r\n  CategoryRice,\r\n  CategorySushi,\r\n} from './components';\r\n\r\nimport { useTitle, useScroll } from '../../hook';\r\n\r\ninterface MenuProps {}\r\n\r\n/**\r\n * @description renders the Menu Page for the app\r\n */\r\nconst Menu: React.FC<MenuProps> = () => {\r\n  useScroll();\r\n  useTitle('Menu');\r\n\r\n  return (\r\n    <>\r\n      <CategorySalad />\r\n      <CategorySushi />\r\n      <CategoryRice />\r\n      <CategoryDrink />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n"],"sourceRoot":""}