{"version":3,"sources":["pages/cart/components/CartItem.tsx","pages/cart/components/CartItems.tsx","pages/cart/Cart.tsx"],"names":["CartItem","id","name","price","quantity","imgSrc","firstRender","React","useRef","useState","currentQuantity","setCurrentQuantity","dispatch","useDispatch","isLoading","useSelector","itemIsLoadingSelector","useEffect","timerId","current","setTimeout","removeItemFromCart","increaseItemQuantity","itemId","amount","isIncrementAmount","clearInterval","Container","Image","src","SubContainer","PrimaryText","QuantityContainer","Button","disabled","onClick","prev","Quantity","isLeftButton","Spinner","size","ProductPrice","toFixed","Price","styled","li","p","theme","white","shadow","button","img","div","h4","span","BaseButton","attrs","outlined","CartItems","cartItems","Object","values","map","cartItem","key","ul","renderValue","value","Value","breakpoints","md","Header","h2","Summary","SummaryHeader","h3","primary","SubField","Field","InputContainer","TipInput","input","black","TipMessage","contained","Cart","props","cart","cartSelector","subtotal","shipping","type","placeholder","min","total","StyledLink","to","items"],"mappings":"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","file":"static/js/5.1f7a2932.chunk.js","sourcesContent":["import React, { ReactElement, useState, useEffect } from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport { BaseButton } from '../../../components/ui/BaseButton';\r\nimport { MdRemove, MdAdd } from 'react-icons/md';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  increaseItemQuantity,\r\n  itemIsLoadingSelector,\r\n  removeItemFromCart,\r\n} from '../../../features/cartSlice';\r\nimport Spinner from '../../../components/ui/LoadingScreen/Spinner/Spinner';\r\nimport { CartItem as CartItemProps } from '../../../features/cartSliceType';\r\n\r\ntype Props = CartItemProps & {};\r\n\r\nfunction CartItem({ id, name, price, quantity, imgSrc }: Props): ReactElement {\r\n  const firstRender = React.useRef(true);\r\n  const [currentQuantity, setCurrentQuantity] = useState(quantity);\r\n\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(itemIsLoadingSelector(id));\r\n\r\n  const onMinusButtonClicked = () => {\r\n    setCurrentQuantity((prev) => prev - 1);\r\n  };\r\n\r\n  const onAddButtonClicked = () => {\r\n    setCurrentQuantity((prev) => prev + 1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    let timerId: number;\r\n    if (firstRender.current) {\r\n      firstRender.current = false;\r\n    } else {\r\n      timerId = setTimeout(() => {\r\n        if (currentQuantity <= 0) {\r\n          dispatch(removeItemFromCart(id));\r\n        } else {\r\n          dispatch(\r\n            increaseItemQuantity({\r\n              itemId: id,\r\n              amount: currentQuantity,\r\n              isIncrementAmount: false,\r\n            })\r\n          );\r\n        }\r\n      }, 300);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timerId);\r\n    };\r\n  }, [currentQuantity, id, dispatch]);\r\n\r\n  return (\r\n    <Container>\r\n      <Image src={imgSrc} />\r\n\r\n      <SubContainer>\r\n        <PrimaryText>{name}</PrimaryText>\r\n        <QuantityContainer>\r\n          <Button\r\n            disabled={currentQuantity === 0}\r\n            onClick={onMinusButtonClicked}\r\n          >\r\n            <MdRemove />\r\n          </Button>\r\n          <Quantity>{currentQuantity}</Quantity>\r\n          <Button isLeftButton onClick={onAddButtonClicked}>\r\n            <MdAdd />\r\n          </Button>\r\n          {isLoading && <Spinner size=\"1rem\" />}\r\n        </QuantityContainer>\r\n      </SubContainer>\r\n\r\n      <ProductPrice>\r\n        <PrimaryText>${(currentQuantity * price).toFixed(2)}</PrimaryText>\r\n        <Price>${price.toFixed(2)} each</Price>\r\n      </ProductPrice>\r\n    </Container>\r\n  );\r\n}\r\n\r\ntype ContainerProps = {};\r\nconst Container = styled.li<ContainerProps>`\r\n  display: grid;\r\n  grid-template-columns: 20% auto max-content;\r\n  column-gap: 1.5rem;\r\n  align-items: flex-start;\r\n  padding: 1rem 1rem;\r\n  background: ${(p) => p.theme.white};\r\n  box-shadow: ${(p) => p.theme.shadow.button};\r\n  border-radius: 4px;\r\n`;\r\n\r\ntype ImageProps = {};\r\nconst Image = styled.img<ImageProps>`\r\n  width: 100%;\r\n  height: 8rem;\r\n  border-radius: 4px;\r\n  object-fit: cover;\r\n  object-position: center;\r\n`;\r\n\r\ntype SubContainerProps = {};\r\nconst SubContainer = styled.div<SubContainerProps>`\r\n  display: grid;\r\n  row-gap: 0.5rem;\r\n`;\r\n\r\ntype NameProps = {};\r\nconst PrimaryText = styled.h4<NameProps>`\r\n  font-size: 1.2rem;\r\n  font-weight: 600;\r\n  font-family: 'Montserrat', sans-serif;\r\n`;\r\n\r\ntype QuantityContainerProps = {};\r\nconst QuantityContainer = styled.div<QuantityContainerProps>`\r\n  display: flex;\r\n\r\n  height: 2rem;\r\n  & > *:not(:last-child) {\r\n    margin-right: 0.5rem;\r\n  }\r\n`;\r\n\r\ntype QuantityProps = {};\r\nconst Quantity = styled.span<QuantityProps>`\r\n  display: inline-block;\r\n  background: transparent;\r\n  padding: 0.25rem 0.5rem;\r\n  border: 1px solid #ccc;\r\n  width: 4rem;\r\n  text-align: center;\r\n  /* same as button */\r\n  height: 100%;\r\n  border-radius: 4px;\r\n`;\r\n\r\ntype ButtonProps = {\r\n  isLeftButton?: boolean;\r\n};\r\nconst Button = styled(BaseButton).attrs({ outlined: true })<ButtonProps>`\r\n  width: 2rem;\r\n  height: 100%;\r\n  padding: 0;\r\n  border-radius: 4px;\r\n\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  transition: all 150ms ease-out;\r\n\r\n  &:hover {\r\n    transform: none;\r\n    box-shadow: none;\r\n  }\r\n\r\n  &:active {\r\n    transform: translate(${(p) => (p.isLeftButton ? '1px' : '-1px')}, 2px);\r\n    box-shadow: none;\r\n  }\r\n`;\r\n\r\ntype PriceProps = {};\r\nconst Price = styled.span<PriceProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\ntype ProductPriceProps = {};\r\nconst ProductPrice = styled.div<ProductPriceProps>``;\r\n\r\nexport { CartItem };\r\n","import React, { ReactElement } from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport { CartItem } from './CartItem';\r\nimport { CartItemsState } from '../../../features/cartSliceType';\r\n\r\ntype Props = {\r\n  cartItems: CartItemsState;\r\n};\r\n\r\nfunction CartItems({ cartItems }: Props): ReactElement {\r\n  return (\r\n    <Container>\r\n      {Object.values(cartItems).map((cartItem) => (\r\n        <CartItem key={cartItem.id} {...cartItem} />\r\n      ))}\r\n    </Container>\r\n  );\r\n}\r\n\r\ntype ContainerProps = {};\r\nconst Container = styled.ul<ContainerProps>`\r\n  grid-area: items;\r\n  display: grid;\r\n  row-gap: 2rem;\r\n`;\r\n\r\nexport { CartItems };\r\n","import React, { ReactElement } from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport { CartItems } from './components/CartItems';\r\nimport { BaseButton } from '../../components/ui/BaseButton';\r\nimport { MdLock } from 'react-icons/md';\r\nimport { StyledLink } from '../../components/navigation/StyledLink';\r\nimport { cartSelector } from '../../features/cartSlice';\r\nimport { useSelector } from 'react-redux';\r\nimport Spinner from '../../components/ui/LoadingScreen/Spinner/Spinner';\r\n\r\ntype Props = {};\r\n\r\nfunction Cart(props: Props): ReactElement {\r\n  const cart = useSelector(cartSelector);\r\n\r\n  return (\r\n    <Container>\r\n      <Header>Your Tray</Header>\r\n      <Summary>\r\n        <SummaryHeader>Order Summary</SummaryHeader>\r\n        <SubField>\r\n          Subtotal\r\n          {renderValue(cart.subtotal, cart.isLoading)}\r\n        </SubField>\r\n\r\n        <SubField>\r\n          Shipping{renderValue(cart.shipping, cart.isLoading)}\r\n        </SubField>\r\n\r\n        <SubField>\r\n          Tip\r\n          <InputContainer>\r\n            <TipInput type=\"number\" placeholder=\"0.00\" min=\"0\" />\r\n            <TipMessage>Thank you!</TipMessage>\r\n          </InputContainer>\r\n        </SubField>\r\n\r\n        <Field>Total{renderValue(cart.total, cart.isLoading)}</Field>\r\n\r\n        <StyledLink to=\"/checkout\">\r\n          <Button disabled={cart.isLoading || cart.subtotal === 0}>\r\n            {cart.subtotal === 0 ? (\r\n              'YOUR CART IS EMPTY'\r\n            ) : (\r\n              <>\r\n                <MdLock />\r\n                PROCEED TO CHECKOUT\r\n              </>\r\n            )}\r\n          </Button>\r\n        </StyledLink>\r\n      </Summary>\r\n      <CartItems cartItems={cart.items} />\r\n    </Container>\r\n  );\r\n}\r\n\r\nfunction renderValue(value: number, isLoading: boolean) {\r\n  return isLoading ? (\r\n    <Spinner size=\"1.2rem\" />\r\n  ) : (\r\n    <Value>${value.toFixed(2)}</Value>\r\n  );\r\n}\r\n\r\ntype ContainerProps = {};\r\nconst Container = styled.div<ContainerProps>`\r\n  margin: 2rem;\r\n  display: grid;\r\n  row-gap: 2rem;\r\n  grid-template-areas:\r\n    'header'\r\n    'summary'\r\n    'items';\r\n\r\n  @media screen and (min-width: ${(p) => p.theme.breakpoints.md}) {\r\n    grid-template-areas:\r\n      'header header'\r\n      'items  summary';\r\n    grid-template-columns: 1fr max-content;\r\n    align-items: flex-start;\r\n    column-gap: 3rem;\r\n  }\r\n`;\r\n\r\ntype HeaderProps = {};\r\nconst Header = styled.h2<HeaderProps>`\r\n  grid-area: header;\r\n`;\r\n\r\ntype SummaryProps = {};\r\nconst Summary = styled.div<SummaryProps>`\r\n  grid-area: summary;\r\n  display: grid;\r\n  row-gap: 1rem;\r\n  max-width: 32rem;\r\n\r\n  padding: 1rem;\r\n  border-radius: 4px;\r\n  border: 1px solid black;\r\n  text-align: center;\r\n`;\r\n\r\ntype SummaryHeaderProps = {};\r\nconst SummaryHeader = styled.h3<SummaryHeaderProps>`\r\n  /* shifting parent's padding */\r\n  margin-left: -1rem;\r\n  margin-top: -1rem;\r\n  width: calc(100% + 2rem);\r\n\r\n  padding: 1rem;\r\n  background: ${(p) => p.theme.primary};\r\n  color: ${(p) => p.theme.white};\r\n`;\r\n\r\ntype SubFieldProps = {};\r\nconst SubField = styled.div<SubFieldProps>`\r\n  display: flex;\r\n  font-weight: 500;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n`;\r\n\r\ntype FieldProps = {};\r\nconst Field = styled.div<FieldProps>`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-weight: 700;\r\n  font-size: 1.3rem;\r\n`;\r\n\r\ntype ValueProps = {};\r\nconst Value = styled.span<ValueProps>``;\r\n\r\ntype InputContainerProps = {};\r\nconst InputContainer = styled.div<InputContainerProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n`;\r\n\r\ntype TipInputProps = {};\r\nconst TipInput = styled.input<TipInputProps>`\r\n  appearance: textfield;\r\n  text-align: right;\r\n  width: 3rem;\r\n  border-width: 0 0 1px 0;\r\n  border-style: solid;\r\n  border-color: ${(p) => p.theme.black};\r\n  outline: none;\r\n  padding-bottom: 0.25rem;\r\n\r\n  :hover {\r\n  }\r\n\r\n  :placeholder-shown + p {\r\n    visibility: hidden;\r\n    transform: translateY(-2px);\r\n  }\r\n`;\r\n\r\ntype TipMessageProps = {};\r\nconst TipMessage = styled.p<TipMessageProps>`\r\n  font-size: inherit;\r\n  font-weight: normal;\r\n  transition: all 100ms ease-in;\r\n  color: ${(p) => p.theme.primary};\r\n`;\r\n\r\ntype ButtonProps = {};\r\nconst Button = styled(BaseButton).attrs({ contained: true })<ButtonProps>`\r\n  border-radius: 4px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  :hover {\r\n    box-shadow: none;\r\n    transform: none;\r\n  }\r\n\r\n  :active {\r\n    box-shadow: none;\r\n    transform: translateY(2px);\r\n  }\r\n`;\r\n\r\nexport default Cart;\r\n"],"sourceRoot":""}