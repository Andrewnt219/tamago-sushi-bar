{"version":3,"sources":["pages/cart/components/CartItem.tsx","pages/cart/components/CartItems.tsx","pages/cart/components/Checkout.tsx","pages/cart/Cart.tsx"],"names":["CartItem","id","name","price","quantity","imgSrc","firstRender","React","useRef","useState","currentQuantity","setCurrentQuantity","dispatch","useDispatch","isLoading","useSelector","itemIsLoadingSelector","useEffect","timerId","current","setTimeout","removeItemFromCart","increaseItemQuantity","itemId","amount","isIncrementAmount","clearInterval","Container","Image","src","SubContainer","PrimaryText","QuantityContainer","QuantityButton","disabled","onClick","prev","Quantity","isLeftButton","SpinnerWrapper","Spinner","size","RemoveButton","ProductPrice","toFixed","Price","styled","li","p","theme","white","shadow","button","img","div","h4","span","BaseButton","attrs","outlined","black","primary","CartItems","cartItems","Object","values","map","cartItem","key","ul","Checkout","onFormSubmitted","userSelector","email","address","ordersSelector","useForm","validateCriteriaMode","mode","defaultValues","handleSubmit","register","errors","onSubmit","data","generateOrder","Form","noValidate","TextField","required","label","type","pattern","value","message","SubmitButton","BaseForm","contained","renderValue","Value","breakpoints","md","EmptyCartText","Header","h2","Summary","SummaryHeader","h3","SubField","Field","InputContainer","TipInput","input","TipMessage","Button","Cart","useTitle","useScrollToTop","cart","cartSelector","showCheckoutForm","setShowCheckoutForm","tip","setTip","updateCart","clearTimeout","subtotal","shipping","placeholder","min","onChange","e","target","total","StyledLink","to","items"],"mappings":"qLAeA,SAASA,EAAT,GAA+E,IAA3DC,EAA0D,EAA1DA,GAAIC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,OACvCC,EAAcC,IAAMC,QAAO,GAD2C,EAE9BC,mBAASL,GAFqB,mBAErEM,EAFqE,KAEpDC,EAFoD,KAItEC,EAAWC,cACXC,EAAYC,YAAYC,YAAsBf,IAuCpD,OAzBAgB,qBAAU,WACR,IAAIC,EAmBJ,OAlBIZ,EAAYa,QACdb,EAAYa,SAAU,EAEtBD,EAAUE,YAAW,WAEjBR,EADEF,GAAmB,EACZW,YAAmBpB,GAG1BqB,YAAqB,CACnBC,OAAQtB,EACRuB,OAAQd,EACRe,mBAAmB,OAIxB,KAGE,WACLC,cAAcR,MAEf,CAACR,EAAiBT,EAAIW,IAGvB,kBAACe,EAAD,KACE,kBAACC,EAAD,CAAOC,IAAKxB,IAEZ,kBAACyB,EAAD,KACE,kBAACC,EAAD,KAAc7B,GACd,kBAAC8B,EAAD,KACE,kBAACC,EAAD,CACEC,SAA8B,IAApBxB,EACVyB,QA9CmB,WAC3BxB,GAAmB,SAACyB,GAAD,OAAUA,EAAO,OA+C5B,kBAAC,IAAD,OAEF,kBAACC,EAAD,KAAW3B,GACX,kBAACuB,EAAD,CAAgBK,cAAY,EAACH,QA/CV,WACzBxB,GAAmB,SAACyB,GAAD,OAAUA,EAAO,OA+C5B,kBAAC,IAAD,OAEDtB,GACC,kBAACyB,EAAD,KACE,kBAACC,EAAA,EAAD,CAASC,KAAK,WAIpB,kBAACC,EAAD,CAAcP,QApDU,WAC5BvB,EAASS,YAAmBpB,MAmDxB,0BAKF,kBAAC0C,EAAD,KACE,kBAACZ,EAAD,UAAgBrB,EAAkBP,GAAOyC,QAAQ,IACjD,kBAACC,EAAD,SAAS1C,EAAMyC,QAAQ,GAAvB,WAOR,IAAMjB,EAAYmB,IAAOC,GAAV,sEAAGD,CAAH,yKAMC,SAACE,GAAD,OAAOA,EAAEC,MAAMC,SACf,SAACF,GAAD,OAAOA,EAAEC,MAAME,OAAOC,UAKhCxB,EAAQkB,IAAOO,IAAV,kEAAGP,CAAH,uFASLhB,EAAegB,IAAOQ,IAAV,yEAAGR,CAAH,kCAMZf,EAAce,IAAOS,GAAV,wEAAGT,CAAH,2EAOXd,EAAoBc,IAAOQ,IAAV,8EAAGR,CAAH,2EAUjBT,EAAWS,IAAOU,KAAV,qEAAGV,CAAH,0JAeRb,EAAiBa,YAAOW,KAAYC,MAAM,CAAEC,UAAU,IAAxC,2EAAGb,CAAH,oPAoBO,SAACE,GAAD,OAAQA,EAAEV,aAAe,MAAQ,UAKtDC,EAAiBO,IAAOU,KAAV,2EAAGV,CAAH,oEAOdJ,EAAeI,IAAOM,OAAV,yEAAGN,CAAH,qPAUP,SAACE,GAAD,OAAOA,EAAEC,MAAMW,SAIb,SAACZ,GAAD,OAAOA,EAAEC,MAAMY,WACD,SAACb,GAAD,OAAOA,EAAEC,MAAMY,WAKpChB,EAAQC,IAAOU,KAAV,kEAAGV,CAAH,yCAMLH,EAAeG,IAAOQ,IAAV,0EAAGR,CAAH,MC5MlB,SAASgB,EAAT,GAAwD,IAAnCC,EAAkC,EAAlCA,UACnB,OACE,kBAAC,EAAD,KACGC,OAAOC,OAAOF,GAAWG,KAAI,SAACC,GAAD,OAC5B,kBAACnE,EAAD,eAAUoE,IAAKD,EAASlE,IAAQkE,QAOxC,IAAMxC,EAAYmB,IAAOuB,GAAV,2EAAGvB,CAAH,gD,wCCAf,SAASwB,EAAT,GAA6D,IAAzCC,EAAwC,EAAxCA,gBAAwC,EAC/BxD,YAAYyD,KAA/BC,EADkD,EAClDA,MAAOC,EAD2C,EAC3CA,QACP5D,EAAcC,YAAY4D,KAA1B7D,UACFF,EAAWC,cAHyC,EAKf+D,YAA4B,CACrEC,qBAAsB,MACtBC,KAAM,WACNC,cAAe,CAAEN,MAAK,OAAEA,QAAF,IAAEA,IAAS,GAAIC,aAH/BM,EALkD,EAKlDA,aAAcC,EALoC,EAKpCA,SAAUC,EAL0B,EAK1BA,OAM1BC,EAAWH,GAAa,SAACI,GAC7BxE,EAASyE,YAAcD,IACvBb,GAAmBA,OAGrB,OACE,kBAACe,EAAD,CAAMC,YAAU,EAACJ,SAAUA,GACzB,kBAACK,EAAA,EAAD,CACEC,UAAQ,EACRxF,GAAG,iBACHC,KAAK,QACLwF,MAAM,QACNC,KAAK,QACLT,OAAQA,EACRD,SAAUA,EAAS,CACjBQ,SAAU,gCACVG,QAAS,CACPC,MAAO,YACPC,QAAS,yBAKf,kBAACN,EAAA,EAAD,CACEC,UAAQ,EACRxF,GAAG,kBACHC,KAAK,UACLwF,MAAM,UACNC,KAAK,OACLT,OAAQA,EACRD,SAAUA,EAAS,CAAEQ,SAAU,0BAGjC,kBAACM,EAAD,CAAcJ,KAAK,UAChB7E,EACC,kBAAC,EAAD,KACE,kBAAC0B,EAAA,EAAD,OAGF,UAOV,IAAM8C,EAAOxC,YAAOkD,KAAV,oEAAGlD,CAAH,MAEJiD,EAAejD,YAAOW,KAAYC,MAAM,CAAEuC,WAAW,IAAzC,4EAAGnD,CAAH,0FAQZP,EAAiBO,IAAOU,KAAV,8EAAGV,CAAH,M,gBCApB,SAASoD,EAAYL,EAAe/E,GAClC,OAAOA,EACL,kBAAC0B,EAAA,EAAD,CAASC,KAAK,WAEd,kBAAC0D,EAAD,SAASN,EAAMjD,QAAQ,IAK3B,IAAMjB,EAAYmB,IAAOQ,IAAV,sEAAGR,CAAH,kRAWmB,SAACE,GAAD,OAAOA,EAAEC,MAAMmD,YAAYC,MAUvDC,EAAgBxD,IAAOE,EAAV,0EAAGF,CAAH,mBAEN,SAACE,GAAD,OAAOA,EAAEC,MAAMY,WAKtB0C,EAASzD,IAAO0D,GAAV,mEAAG1D,CAAH,uBAKN2D,EAAU3D,IAAOQ,IAAV,oEAAGR,CAAH,0IAaP4D,EAAgB5D,IAAO6D,GAAV,0EAAG7D,CAAH,uGAOH,SAACE,GAAD,OAAOA,EAAEC,MAAMY,WACpB,SAACb,GAAD,OAAOA,EAAEC,MAAMC,SAIpB0D,EAAW9D,IAAOQ,IAAV,qEAAGR,CAAH,4EAQR+D,EAAQ/D,IAAOQ,IAAV,kEAAGR,CAAH,kFAQLqD,EAAQrD,IAAOU,KAAV,kEAAGV,CAAH,MAGLgE,EAAiBhE,IAAOQ,IAAV,2EAAGR,CAAH,8DAOdiE,EAAWjE,IAAOkE,MAAV,qEAAGlE,CAAH,mOAMI,SAACE,GAAD,OAAOA,EAAEC,MAAMW,SAc3BqD,EAAanE,IAAOE,EAAV,wEAAGF,CAAH,kFAIL,SAACE,GAAD,OAAOA,EAAEC,MAAMY,WAIpBqD,EAASpE,YAAOW,KAAYC,MAAM,CAAEuC,WAAW,IAAzC,oEAAGnD,CAAH,oLAkBGqE,UArNf,WACEC,YAAS,QACTC,cAEA,IAAMC,EAAOvG,YAAYwG,KAJG,EAKoB9G,oBAAS,GAL7B,mBAKrB+G,EALqB,KAKHC,EALG,OAONhH,mBAAiB,IAPX,mBAOrBiH,EAPqB,KAOhBC,EAPgB,KAQtB/G,EAAWC,cAYjB,OAVAN,IAAMU,WAAU,WACd,IAAMC,EAAUE,YAAW,WACrBkG,EAAKrH,KAAOyH,GAAO,GACrB9G,EAASgH,YAAW,CAAE3H,GAAIqH,EAAKrH,GAAIyH,KAAMA,OAE1C,KAEH,OAAO,kBAAMG,aAAa3G,MACzB,CAACwG,EAAK9G,EAAU0G,EAAKrH,KAGtB,kBAAC,EAAD,KACE,kBAACsG,EAAD,kBACA,kBAACE,EAAD,KACE,kBAACC,EAAD,sBACA,kBAACE,EAAD,gBAEGV,EAAYoB,EAAKQ,SAAUR,EAAKxG,YAGnC,kBAAC8F,EAAD,gBACWV,EAAYoB,EAAKS,SAAUT,EAAKxG,YAG3C,kBAAC8F,EAAD,WAEE,kBAACE,EAAD,KACE,kBAACC,EAAD,CACEpB,KAAK,SACLqC,YAAY,OACZC,IAAI,IACJpC,MAAO6B,EACPQ,SAAU,SAACC,GAAD,OAAOR,EAAOQ,EAAEC,OAAOvC,UAEnC,kBAACoB,EAAD,MACIS,GAAO,EAAI,aAAe,mBAKlC,kBAACb,EAAD,aAAaX,EAAYoB,EAAKe,MAAOf,EAAKxG,YAExC0G,EAQA,kBAAClD,EAAD,CAAUC,gBAAiB,kBAAMkD,GAAoB,MAPrD,kBAACP,EAAD,CACEhF,SAAUoF,EAAKxG,WAA+B,IAAlBwG,EAAKQ,SACjC3F,QAAS,kBAAMsF,GAAoB,KAEhB,IAAlBH,EAAKQ,SAAiB,qBAAuB,wBAMjC,IAAlBR,EAAKQ,SACJ,kBAACxB,EAAD,iCAC2B,kBAACgC,EAAA,EAAD,CAAYC,GAAG,SAAf,SAG3B,kBAACzE,EAAD,CAAWC,UAAWuD,EAAKkB","file":"static/js/5.0a6a0ff3.chunk.js","sourcesContent":["import React, { ReactElement, useState, useEffect } from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport { BaseButton } from '../../../components/ui/BaseButton';\r\nimport { MdRemove, MdAdd } from 'react-icons/md';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  increaseItemQuantity,\r\n  itemIsLoadingSelector,\r\n  removeItemFromCart,\r\n} from '../../../features/cartSlice';\r\nimport Spinner from '../../../components/ui/LoadingScreen/Spinner/Spinner';\r\nimport { CartItem as CartItemProps } from '../../../features/sliceTypes';\r\n\r\ntype Props = CartItemProps & {};\r\n\r\nfunction CartItem({ id, name, price, quantity, imgSrc }: Props): ReactElement {\r\n  const firstRender = React.useRef(true);\r\n  const [currentQuantity, setCurrentQuantity] = useState(quantity);\r\n\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(itemIsLoadingSelector(id));\r\n\r\n  const onMinusButtonClicked = () => {\r\n    setCurrentQuantity((prev) => prev - 1);\r\n  };\r\n\r\n  const onAddButtonClicked = () => {\r\n    setCurrentQuantity((prev) => prev + 1);\r\n  };\r\n\r\n  const onRemoveButtonClicked = () => {\r\n    dispatch(removeItemFromCart(id));\r\n  };\r\n\r\n  useEffect(() => {\r\n    let timerId: number;\r\n    if (firstRender.current) {\r\n      firstRender.current = false;\r\n    } else {\r\n      timerId = setTimeout(() => {\r\n        if (currentQuantity <= 0) {\r\n          dispatch(removeItemFromCart(id));\r\n        } else {\r\n          dispatch(\r\n            increaseItemQuantity({\r\n              itemId: id,\r\n              amount: currentQuantity,\r\n              isIncrementAmount: false,\r\n            })\r\n          );\r\n        }\r\n      }, 300);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timerId);\r\n    };\r\n  }, [currentQuantity, id, dispatch]);\r\n\r\n  return (\r\n    <Container>\r\n      <Image src={imgSrc} />\r\n\r\n      <SubContainer>\r\n        <PrimaryText>{name}</PrimaryText>\r\n        <QuantityContainer>\r\n          <QuantityButton\r\n            disabled={currentQuantity === 0}\r\n            onClick={onMinusButtonClicked}\r\n          >\r\n            <MdRemove />\r\n          </QuantityButton>\r\n          <Quantity>{currentQuantity}</Quantity>\r\n          <QuantityButton isLeftButton onClick={onAddButtonClicked}>\r\n            <MdAdd />\r\n          </QuantityButton>\r\n          {isLoading && (\r\n            <SpinnerWrapper>\r\n              <Spinner size=\"1rem\" />\r\n            </SpinnerWrapper>\r\n          )}\r\n        </QuantityContainer>\r\n        <RemoveButton onClick={onRemoveButtonClicked}>\r\n          Remove item from cart\r\n        </RemoveButton>\r\n      </SubContainer>\r\n\r\n      <ProductPrice>\r\n        <PrimaryText>${(currentQuantity * price).toFixed(2)}</PrimaryText>\r\n        <Price>${price.toFixed(2)} each</Price>\r\n      </ProductPrice>\r\n    </Container>\r\n  );\r\n}\r\n\r\ntype ContainerProps = {};\r\nconst Container = styled.li<ContainerProps>`\r\n  display: grid;\r\n  grid-template-columns: 20% auto max-content;\r\n  column-gap: 1.5rem;\r\n  align-items: flex-start;\r\n  padding: 1rem 1rem;\r\n  background: ${(p) => p.theme.white};\r\n  box-shadow: ${(p) => p.theme.shadow.button};\r\n  border-radius: 4px;\r\n`;\r\n\r\ntype ImageProps = {};\r\nconst Image = styled.img<ImageProps>`\r\n  width: 100%;\r\n  height: 8rem;\r\n  border-radius: 4px;\r\n  object-fit: cover;\r\n  object-position: center;\r\n`;\r\n\r\ntype SubContainerProps = {};\r\nconst SubContainer = styled.div<SubContainerProps>`\r\n  display: grid;\r\n  row-gap: 0.8rem;\r\n`;\r\n\r\ntype NameProps = {};\r\nconst PrimaryText = styled.h4<NameProps>`\r\n  font-size: 1.2rem;\r\n  font-weight: 600;\r\n  font-family: 'Montserrat', sans-serif;\r\n`;\r\n\r\ntype QuantityContainerProps = {};\r\nconst QuantityContainer = styled.div<QuantityContainerProps>`\r\n  display: flex;\r\n\r\n  height: 2rem;\r\n  & > *:not(:last-child) {\r\n    margin-right: 0.5rem;\r\n  }\r\n`;\r\n\r\ntype QuantityProps = {};\r\nconst Quantity = styled.span<QuantityProps>`\r\n  display: inline-block;\r\n  background: transparent;\r\n  padding: 0.25rem 0.5rem;\r\n  border: 1px solid #ccc;\r\n  width: 4rem;\r\n  text-align: center;\r\n  /* same as button */\r\n  height: 100%;\r\n  border-radius: 4px;\r\n`;\r\n\r\ntype QuantityButtonProps = {\r\n  isLeftButton?: boolean;\r\n};\r\nconst QuantityButton = styled(BaseButton).attrs({ outlined: true })<\r\n  QuantityButtonProps\r\n>`\r\n  width: 2rem;\r\n  height: 100%;\r\n  padding: 0;\r\n  border-radius: 4px;\r\n\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  transition: all 150ms ease-out;\r\n\r\n  &:hover {\r\n    transform: none;\r\n    box-shadow: none;\r\n  }\r\n\r\n  &:active {\r\n    transform: translate(${(p) => (p.isLeftButton ? '1px' : '-1px')}, 2px);\r\n    box-shadow: none;\r\n  }\r\n`;\r\n\r\nconst SpinnerWrapper = styled.span`\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\ntype RemoveButtonProps = {};\r\nconst RemoveButton = styled.button<RemoveButtonProps>`\r\n  padding: 0;\r\n  padding-bottom: 0.2rem;\r\n  justify-self: flex-start;\r\n  font-size: inherit;\r\n  background: transparent;\r\n  border: none;\r\n  border-bottom: 1px solid currentColor;\r\n  cursor: pointer;\r\n\r\n  color: ${(p) => p.theme.black};\r\n\r\n  transition: all 200ms ease;\r\n  :hover {\r\n    color: ${(p) => p.theme.primary};\r\n    border-bottom-color: ${(p) => p.theme.primary};\r\n  }\r\n`;\r\n\r\ntype PriceProps = {};\r\nconst Price = styled.span<PriceProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\ntype ProductPriceProps = {};\r\nconst ProductPrice = styled.div<ProductPriceProps>``;\r\n\r\nexport { CartItem };\r\n","import React, { ReactElement } from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport { CartItem } from './CartItem';\r\nimport { CartItemsState } from '../../../features/sliceTypes';\r\n\r\ntype Props = {\r\n  cartItems: CartItemsState;\r\n};\r\n\r\nfunction CartItems({ cartItems }: Props): ReactElement {\r\n  return (\r\n    <Container>\r\n      {Object.values(cartItems).map((cartItem) => (\r\n        <CartItem key={cartItem.id} {...cartItem} />\r\n      ))}\r\n    </Container>\r\n  );\r\n}\r\n\r\ntype ContainerProps = {};\r\nconst Container = styled.ul<ContainerProps>`\r\n  grid-area: items;\r\n  display: grid;\r\n  row-gap: 2rem;\r\n`;\r\n\r\nexport { CartItems };\r\n","import React, { ReactElement } from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport { useForm } from 'react-hook-form';\r\nimport { BaseForm } from '../../../components/ui/form/BaseForm';\r\nimport { TextField } from '../../../components/ui/form/TextField';\r\nimport { BaseButton } from '../../../components/ui/BaseButton';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { userSelector } from '../../../features/userSlice';\r\nimport { generateOrder, ordersSelector } from '../../../features/orderSlice';\r\nimport Spinner from '../../../components/ui/LoadingScreen/Spinner/Spinner';\r\n\r\ntype Props = {\r\n  onFormSubmitted?: () => void;\r\n};\r\n\r\nexport type CheckoutFormValues = {\r\n  email: string;\r\n  address: string;\r\n};\r\n\r\nfunction Checkout({ onFormSubmitted }: Props): ReactElement {\r\n  const { email, address } = useSelector(userSelector);\r\n  const { isLoading } = useSelector(ordersSelector);\r\n  const dispatch = useDispatch();\r\n\r\n  const { handleSubmit, register, errors } = useForm<CheckoutFormValues>({\r\n    validateCriteriaMode: 'all',\r\n    mode: 'onChange',\r\n    defaultValues: { email: email ?? '', address },\r\n  });\r\n\r\n  const onSubmit = handleSubmit((data) => {\r\n    dispatch(generateOrder(data));\r\n    onFormSubmitted && onFormSubmitted();\r\n  });\r\n\r\n  return (\r\n    <Form noValidate onSubmit={onSubmit}>\r\n      <TextField\r\n        required\r\n        id=\"checkout-email\"\r\n        name=\"email\"\r\n        label=\"Email\"\r\n        type=\"email\"\r\n        errors={errors}\r\n        register={register({\r\n          required: 'Email is required for updates',\r\n          pattern: {\r\n            value: /.*@.*\\..+/,\r\n            message: 'Not a valid email',\r\n          },\r\n        })}\r\n      />\r\n\r\n      <TextField\r\n        required\r\n        id=\"checout-address\"\r\n        name=\"address\"\r\n        label=\"Address\"\r\n        type=\"text\"\r\n        errors={errors}\r\n        register={register({ required: 'Address is required' })}\r\n      />\r\n\r\n      <SubmitButton type=\"submit\">\r\n        {isLoading ? (\r\n          <SpinnerWrapper>\r\n            <Spinner />\r\n          </SpinnerWrapper>\r\n        ) : (\r\n          'ORDER'\r\n        )}\r\n      </SubmitButton>\r\n    </Form>\r\n  );\r\n}\r\n\r\nconst Form = styled(BaseForm)``;\r\n\r\nconst SubmitButton = styled(BaseButton).attrs({ contained: true })`\r\n  border-radius: 4px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n`;\r\n\r\nconst SpinnerWrapper = styled.span``;\r\nexport { Checkout };\r\n","import React, { ReactElement, useState } from 'react';\r\nimport styled from 'styled-components/macro';\r\nimport { CartItems } from './components/CartItems';\r\nimport { BaseButton } from '../../components/ui/BaseButton';\r\nimport { cartSelector, updateCart } from '../../features/cartSlice';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Spinner from '../../components/ui/LoadingScreen/Spinner/Spinner';\r\nimport { Checkout } from './components/Checkout';\r\nimport { useScrollToTop, useTitle } from '../../hook';\r\nimport { StyledLink } from '../../components/navigation/StyledLink';\r\n\r\ntype Props = {};\r\n\r\nfunction Cart(): ReactElement {\r\n  useTitle('Cart');\r\n  useScrollToTop();\r\n\r\n  const cart = useSelector(cartSelector);\r\n  const [showCheckoutForm, setShowCheckoutForm] = useState(false);\r\n  debugger;\r\n  const [tip, setTip] = useState<string>('');\r\n  const dispatch = useDispatch();\r\n\r\n  React.useEffect(() => {\r\n    const timerId = setTimeout(() => {\r\n      if (cart.id && +tip >= 0) {\r\n        dispatch(updateCart({ id: cart.id, tip: +tip }));\r\n      }\r\n    }, 200);\r\n\r\n    return () => clearTimeout(timerId);\r\n  }, [tip, dispatch, cart.id]);\r\n\r\n  return (\r\n    <Container>\r\n      <Header>Your Tray</Header>\r\n      <Summary>\r\n        <SummaryHeader>Order Summary</SummaryHeader>\r\n        <SubField>\r\n          Subtotal\r\n          {renderValue(cart.subtotal, cart.isLoading)}\r\n        </SubField>\r\n\r\n        <SubField>\r\n          Shipping{renderValue(cart.shipping, cart.isLoading)}\r\n        </SubField>\r\n\r\n        <SubField>\r\n          Tip\r\n          <InputContainer>\r\n            <TipInput\r\n              type=\"number\"\r\n              placeholder=\"0.00\"\r\n              min=\"0\"\r\n              value={tip}\r\n              onChange={(e) => setTip(e.target.value)}\r\n            />\r\n            <TipMessage>\r\n              {+tip >= 0 ? 'Thank you!' : 'Great advice!'}\r\n            </TipMessage>\r\n          </InputContainer>\r\n        </SubField>\r\n\r\n        <Field>Total{renderValue(cart.total, cart.isLoading)}</Field>\r\n\r\n        {!showCheckoutForm ? (\r\n          <Button\r\n            disabled={cart.isLoading || cart.subtotal === 0}\r\n            onClick={() => setShowCheckoutForm(true)}\r\n          >\r\n            {cart.subtotal === 0 ? 'YOUR CART IS EMPTY' : 'PROCEED TO SHIPPING'}\r\n          </Button>\r\n        ) : (\r\n          <Checkout onFormSubmitted={() => setShowCheckoutForm(false)} />\r\n        )}\r\n      </Summary>\r\n      {cart.subtotal === 0 ? (\r\n        <EmptyCartText>\r\n          Find delicious dishes in <StyledLink to=\"/menu\">Menu</StyledLink>\r\n        </EmptyCartText>\r\n      ) : (\r\n        <CartItems cartItems={cart.items} />\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nfunction renderValue(value: number, isLoading: boolean) {\r\n  return isLoading ? (\r\n    <Spinner size=\"1.2rem\" />\r\n  ) : (\r\n    <Value>${value.toFixed(2)}</Value>\r\n  );\r\n}\r\n\r\ntype ContainerProps = {};\r\nconst Container = styled.div<ContainerProps>`\r\n  position: relative;\r\n\r\n  margin: 2rem;\r\n  display: grid;\r\n  row-gap: 2rem;\r\n  grid-template-areas:\r\n    'header'\r\n    'summary'\r\n    'items';\r\n\r\n  @media screen and (min-width: ${(p) => p.theme.breakpoints.md}) {\r\n    grid-template-areas:\r\n      'header header'\r\n      'items  summary';\r\n    grid-template-columns: 1fr max-content;\r\n    align-items: flex-start;\r\n    column-gap: 3rem;\r\n  }\r\n`;\r\n\r\nconst EmptyCartText = styled.p`\r\n  a {\r\n    color: ${(p) => p.theme.primary};\r\n  }\r\n`;\r\n\r\ntype HeaderProps = {};\r\nconst Header = styled.h2<HeaderProps>`\r\n  grid-area: header;\r\n`;\r\n\r\ntype SummaryProps = {};\r\nconst Summary = styled.div<SummaryProps>`\r\n  grid-area: summary;\r\n  display: grid;\r\n  row-gap: 1rem;\r\n  max-width: 32rem;\r\n\r\n  padding: 1rem;\r\n  border-radius: 4px;\r\n  border: 1px solid black;\r\n  text-align: center;\r\n`;\r\n\r\ntype SummaryHeaderProps = {};\r\nconst SummaryHeader = styled.h3<SummaryHeaderProps>`\r\n  /* shifting parent's padding */\r\n  margin-left: -1rem;\r\n  margin-top: -1rem;\r\n  width: calc(100% + 2rem);\r\n\r\n  padding: 1rem;\r\n  background: ${(p) => p.theme.primary};\r\n  color: ${(p) => p.theme.white};\r\n`;\r\n\r\ntype SubFieldProps = {};\r\nconst SubField = styled.div<SubFieldProps>`\r\n  display: flex;\r\n  font-weight: 500;\r\n  width: 100%;\r\n  justify-content: space-between;\r\n`;\r\n\r\ntype FieldProps = {};\r\nconst Field = styled.div<FieldProps>`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  font-weight: 700;\r\n  font-size: 1.3rem;\r\n`;\r\n\r\ntype ValueProps = {};\r\nconst Value = styled.span<ValueProps>``;\r\n\r\ntype InputContainerProps = {};\r\nconst InputContainer = styled.div<InputContainerProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n`;\r\n\r\ntype TipInputProps = {};\r\nconst TipInput = styled.input<TipInputProps>`\r\n  appearance: textfield;\r\n  text-align: right;\r\n  width: 3rem;\r\n  border-width: 0 0 1px 0;\r\n  border-style: solid;\r\n  border-color: ${(p) => p.theme.black};\r\n  outline: none;\r\n  padding-bottom: 0.25rem;\r\n\r\n  :hover {\r\n  }\r\n\r\n  :placeholder-shown + p {\r\n    visibility: hidden;\r\n    transform: translateY(-2px);\r\n  }\r\n`;\r\n\r\ntype TipMessageProps = {};\r\nconst TipMessage = styled.p<TipMessageProps>`\r\n  font-size: inherit;\r\n  font-weight: normal;\r\n  transition: all 100ms ease-in;\r\n  color: ${(p) => p.theme.primary};\r\n`;\r\n\r\ntype ButtonProps = {};\r\nconst Button = styled(BaseButton).attrs({ contained: true })<ButtonProps>`\r\n  border-radius: 4px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  :hover {\r\n    box-shadow: none;\r\n    transform: none;\r\n  }\r\n\r\n  :active {\r\n    box-shadow: none;\r\n    transform: translateY(2px);\r\n  }\r\n`;\r\n\r\nexport default Cart;\r\n"],"sourceRoot":""}